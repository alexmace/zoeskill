#!/usr/bin/env php
<?php
// Needs to be run as a daemon and controlled with supervisorctl
// Restart after 10 messages

<?php
if (PHP_SAPI == 'cli-server') {
    // To help the built-in PHP dev server, check if the request was actually for
    // something which should probably be served as a static file
    $url  = parse_url($_SERVER['REQUEST_URI']);
    $file = __DIR__ . $url['path'];
    if (is_file($file)) {
        return false;
    }
}

require __DIR__ . '/../vendor/autoload.php';

session_start();

// Instantiate the app
$settings = require __DIR__ . '/../src/settings.php';

if (file_exists(__DIR__ . '/../src/.settings.php')) {
    $localSettings = require __DIR__ . '/../src/.settings.php';
    $settings = array_merge($settings, $localSettings);
}
$app = new \Slim\App($settings);

// Set up dependencies
require __DIR__ . '/../src/dependencies.php';

// // // Register middleware
// // require __DIR__ . '/../src/middleware.php';
// //
// // // Register routes
// // require __DIR__ . '/../src/routes.php';
//
// // Run app
// $app->run();

// $container was set up in dependencies.php

$callback = function($msg) use ($container) {
    echo " [x] Received ", $msg->body, "\n";
    $decoded = json_decode($msg->body, true);

    if ($decoded['enableSchedule'] === false) {
        $zeServices = $container->get('zeservices');
        $zeServices->deactivateChargeSchedule($zeServices->getCar()->getVin());
    }

    // Acknowledge the message

    // If there is an error, nack the message
};

$channel = $container->get('rabbitmq');
$channel->basic_consume('leaving', '', false, true, false, false, $callback);

while(count($channel->callbacks)) {
    $channel->wait();
}
